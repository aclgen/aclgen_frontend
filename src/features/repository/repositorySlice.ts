import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";

import type { AppState, AppThunk } from "../../app/store";
import { fetchRepositories } from "./repositoryAPI";
import {
  ACCESS,
  FireWall,
  Repository,
  WorkSpace,
} from "../../types/repository";
import EmptyRepository from "./EmptyRepository";
import { commitServicesAsync } from "./DraftRepositorySlice";
import { fetchServicesWithRepoId } from "../service/serviceAPI";
import { fetchNetworkObjectsWithRepoId } from "../networkObject/networkObjectAPI";
import {
  fetchDevicesWithWorkSpaceId,
  fetchWorkSpaceWithId,
} from "../workSpaceDraft/WorkSpaceAPI";
import { fetchRulesWithDeviceId } from "../rules/ruleAPI";

export interface RepositoryState {
  repositories: Repository[];
  selectedRepository: Repository;
  status: "empty" | "idle" | "loading" | "failed";
}

const initialState: RepositoryState = {
  repositories: [],
  selectedRepository: EmptyRepository,
  status: "empty",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const updateRepositoriesAsync = createAsyncThunk(
  "repository/fetchRepositories",
  async () => {
    const response = await fetchRepositories();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const selectRepositoryAsync = createAsyncThunk(
  "repository/fetchRepositories",
  async (id: string) => {
    const all = await Promise.all([
      fetchWorkSpaceWithId(id),
      fetchServicesWithRepoId(id),
      fetchNetworkObjectsWithRepoId(id),
    ]);

    const devices = await fetchDevicesWithWorkSpaceId(id);

    const rules = await fetchRulesWithDeviceId(id, devices.data[0].id);

    const workSpace: WorkSpace = {
      status: "source",
      id: all[0].data.id,
      children: devices.data,
    };

    (workSpace.children[0] as FireWall).rules = rules.data;
    const repo: Repository = {
      UUID: id,
      access: ACCESS.PUBLIC,
      repo: "testRepo",
      description: "YUUp",
      logo: "Nope",
      workSpace: workSpace,
      networkObjects: all[2].data,
      services: all[1].data,
    };
    // The value we return becomes the `fulfilled` action payload
    return repo;
  }
);

export const RepositorySlice = createSlice({
  name: "repository",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateRepositories: (state, action: PayloadAction<Repository[]>) => {},
    setSelectedRepository: (state, action: PayloadAction<Repository>) => {
      state.selectedRepository = action.payload;
      state.status = "idle";
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(updateRepositoriesAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(updateRepositoriesAsync.rejected, (state) => {
        state.status = "failed";
        state.repositories = [];
      })
      .addCase(updateRepositoriesAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.repositories = action.payload;
      });
    builder.addCase(commitServicesAsync.pending, (state, action) => {
      state.status = "loading";
    });
    builder.addCase(commitServicesAsync.fulfilled, (state, action) => {
      state.status = "idle";
      const newService = [...state.repositories[0].services];
      for (let i = 0; i < action.payload.length; i++) {
        const index = newService.findIndex(
          (element) => action.payload[i].id === element.id
        );
        if (index >= 0) {
          if (action.payload[i].status === "deleted") {
            newService.splice(index);
          } else {
            newService[index] = { ...action.payload[i], status: "source" };
          }
        } else {
          if (action.payload[i].status !== "deleted") {
            newService.push({ ...action.payload[i], status: "source" });
          }
        }
      }
      state.repositories = [
        {
          ...state.repositories[0],
          services: newService,
        },
      ];
    });
  },
});

export const { updateRepositories, setSelectedRepository } =
  RepositorySlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectRepository = (state: AppState) => state.repository;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default RepositorySlice.reducer;
