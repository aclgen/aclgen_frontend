import {
  createAsyncThunk,
  createSlice,
  Dispatch,
  PayloadAction,
} from "@reduxjs/toolkit";

import type { AppState, AppThunk } from "../../app/store";
import { NetworkElement, Repository, WorkSpace } from "../../types/repository";
import EmptyRepository from "./EmptyRepository";
import { setSelectedRepository } from "./repositorySlice";
import { WritableDraft } from "immer/dist/internal";
import {
  EditableElement,
  NetworkObjectElement,
  ServiceElement,
  Nestable,
} from "../../types/types";

export interface DraftRepositoryState {
  repository: Repository;
  status: "empty" | "idle" | "loading" | "failed";
}

const initialState: DraftRepositoryState = {
  repository: EmptyRepository,
  status: "empty",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const DraftRepositorySlice = createSlice({
  name: "draftRepository",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateRepositories: (state, action: PayloadAction<Repository[]>) => {},
    mergedDraftRepository: (state, action: PayloadAction<Repository>) => {},
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(setSelectedRepository, (state, action) => {
      state.status = "idle";
      state.repository = mergeUpdatedRepository(
        state.repository,
        action.payload
      );
    });
  },
});

export const { updateRepositories, mergedDraftRepository } =
  DraftRepositorySlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectDraftRepository = (state: AppState) => state.draftRepository;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default DraftRepositorySlice.reducer;

function mergeUpdatedRepository(
  repository: WritableDraft<Repository>,
  payload: Repository
): Repository {
  const children: NetworkElement[] = mergeWorkSpace(
    repository.workSpace,
    payload.workSpace
  );
  const workSpace = { ...repository.workSpace, children };
  const services: ServiceElement[] = mergeServices(
    repository.services as ServiceElement[],
    payload.services
  );
  const networkObjects: NetworkObjectElement[] = mergeNetworkObjects(
    repository.networkObjects,
    payload.networkObjects
  );

  return { ...payload, workSpace, services, networkObjects };
}
function mergeWorkSpace(
  sourceWorkSpace: WorkSpace,
  draftWorkspace: WorkSpace
): NetworkElement[] {
  return mergeEditableElements(
    sourceWorkSpace.children,
    draftWorkspace.children
  );
}

function mergeServices(
  sourceServices: ServiceElement[],
  draftServices: ServiceElement[]
): ServiceElement[] {
  return mergeEditableElements(sourceServices, draftServices);
}

function mergeNetworkObjects(
  sourceNetworkElements: NetworkObjectElement[],
  draftNetworkElements: NetworkObjectElement[]
): NetworkObjectElement[] {
  return mergeEditableElements(sourceNetworkElements, draftNetworkElements);
}

function mergeEditableElements<T extends EditableElement>(
  sourceElements: T[],
  draftElements: T[]
): T[] {
  const source: T[] = [...sourceElements];
  const newElements: T[] = draftElements.map((element: T) => {
    const matchingElement: T | undefined = source.find(
      (sourceElement) => sourceElement.id === element.id
    );
    if (matchingElement === undefined) {
      return element;
    } else {
      return mergeElement(matchingElement, element);
    }
  });

  return newElements;
}

function mergeElement<T extends EditableElement>(source: T, newElement: T): T {
  if (newElement.status === "source") {
    return source;
    //nestable means an object containing children element, i.e. folder or grouped object
  } else if (isNestable(source) && isNestable(newElement)) {
    mergeEditableElements(
      source.children as EditableElement[],
      newElement.children as EditableElement[]
    );
  } else {
    return newElement;
  }
}

function isNestable<T>(element: any): element is Nestable<T> {
  return element.children !== undefined;
}
