import { NetworkObjectElement, ServiceElement } from "../../types/types";
import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";

import type { AppState, AppThunk } from "../../app/store";
import { fetchNetworkObjects } from "./networkObjectAPI";

export interface NetworkObjectState {
  networkObjects: NetworkObjectElement[];
  status: "empty" | "idle" | "loading" | "failed";
}

const initialState: NetworkObjectState = {
  networkObjects: [],
  status: "empty",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const updateAsync = createAsyncThunk("rules/fetchRules", async () => {
  const response = await fetchNetworkObjects();
  // The value we return becomes the `fulfilled` action payload
  return response.data;
});

export const NetworkObjectSlice = createSlice({
  name: "service",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateNetworkObjects: (
      state,
      action: PayloadAction<NetworkObjectElement>
    ) => {},
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(updateAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(updateAsync.rejected, (state) => {
        state.status = "failed";
        state.networkObjects = [];
      })
      .addCase(updateAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.networkObjects = action.payload;
      });
  },
});

export const { updateNetworkObjects } = NetworkObjectSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectService = (state: AppState) => state.networkObject;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default NetworkObjectSlice.reducer;
